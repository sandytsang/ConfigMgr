#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: e1eaf950-ebca-4207-82d1-417f62ac2dac
# Source File: SCCM_Set_Content.psproj
#------------------------------------------------------------------------
#region Project Recovery Data (DO NOT MODIFY)
<#RecoveryData:
CQIAAB+LCAAAAAAABACNkdFOgzAUhu+X7B1I71kpmU6T0guZM15MzVi8JWdwMDWlJaUY9/YWAcNi
Yrz82v98f3rKD1iYD7TnLTgQy0UQ8Bdr3rFw3+DxFW0rjRZsxTidYLzbSYWPW4EMobq9ikI8FRCu
42gT3sQlC9dsU13HUMQlFJyO4XF0bDmeGxQRp3Oc5EaVvi6g87Z2hBGDA1ZoURf4BDUmhAR3nVRl
QiIiMgfWdc2qaduh/O/RFJQK9yD1ztg6b9pq7prOvaz6t+xBmRMor2IzVZCaugZd3n861P0uE3K0
HRIxpFvfwC4aBhje/bOngZ6tfJMaVB/oe0WWpvs8Q5enRnu987LGD3D6K7lccHrx9V9XyxKhCQIA
AA==#>
#endregion
<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2016 v5.2.129
     Generated on:       22/02/2017 12:31 PM
     Generated by:       Sandy
	 version:			2.2
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2016
#>


#region Source: Startup.pss
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
ZAMAAB+LCAAAAAAABAC9k99Lw0AMx98F/4djz+Xa2tU6uBZkshdBxYn6mnbpOLwfI7lz9L93mzJF
HwSRkpd8E5IPIYm6x86/Ig1XEEDsHNbe1ZMzmU+a0xMh1C3ptXZgFtrgDVhslgEoxI3cMKv0R/ZQ
c8mMtjUa+aA/I0NjufNkdJuIxw/WVGZ7S8Q8mhAJa4cxEJhE3MVdj+4ahwf/gq5uqwrKrjzPZ8UU
s4uZSo9dv1OWAwe0YzDkk3Yrv2W58GR5FOJ+U+OACLbarf/Cyoq+7Ks+z1dlBgX8znq2ZpSZ5p7w
/0FH+X7yKv36Vc0baArZVmQDAAA=#>
#endregion
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main {
<#
    .SYNOPSIS
        The Main function starts the project application.
    
    .PARAMETER Commandline
        $Commandline contains the complete argument string passed to the script packager executable.
    
    .NOTES
        Use this function to initialize your script and to call GUI forms.
		
    .NOTES
        To get the console output in the Packager (Forms Engine) use: 
		$ConsoleOutput (Type: System.Collections.ArrayList)
#>
	Param ([String]$Commandline)
		
	#--------------------------------------------------------------------------
	#TODO: Add initialization script here (Load modules and check requirements)
	
	
	#--------------------------------------------------------------------------
	
	if((Call-MainForm_psf) -eq 'OK')
	{
		
	}
	
	$global:ExitCode = 0 #Set the exit code for the Packager

}







#endregion Source: Startup.pss

#region Source: MainForm.psf
function Call-MainForm_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
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#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Define SAPIEN Types
	#----------------------------------------------
	try{
		$local:type = [ProgressBarOverlay]
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms', 'System.Drawing') -TypeDefinition  @" 
		using System;
		using System.Windows.Forms;
		using System.Drawing;
        namespace SAPIENTypes
        {
		    public class ProgressBarOverlay : System.Windows.Forms.ProgressBar
	        {
	            protected override void WndProc(ref Message m)
	            { 
	                base.WndProc(ref m);
	                if (m.Msg == 0x000F)// WM_PAINT
	                {
	                    if (Style != System.Windows.Forms.ProgressBarStyle.Marquee || !string.IsNullOrEmpty(this.Text))
                        {
                            using (Graphics g = this.CreateGraphics())
                            {
                                using (StringFormat stringFormat = new StringFormat(StringFormatFlags.NoWrap))
                                {
                                    stringFormat.Alignment = StringAlignment.Center;
                                    stringFormat.LineAlignment = StringAlignment.Center;
                                    if (!string.IsNullOrEmpty(this.Text))
                                        g.DrawString(this.Text, this.Font, Brushes.Black, this.ClientRectangle, stringFormat);
                                    else
                                    {
                                        int percent = (int)(((double)Value / (double)Maximum) * 100);
                                        g.DrawString(percent.ToString() + "%", this.Font, Brushes.Black, this.ClientRectangle, stringFormat);
                                    }
                                }
                            }
                        }
	                }
	            }
              
                public string TextOverlay
                {
                    get
                    {
                        return base.Text;
                    }
                    set
                    {
                        base.Text = value;
                        Invalidate();
                    }
                }
	        }
        }
"@ | Out-Null
	}
	#endregion Define SAPIEN Types

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$MainForm = New-Object 'System.Windows.Forms.Form'
	$groupbox2 = New-Object 'System.Windows.Forms.GroupBox'
	$SelectSearchTyperichtextbox1 = New-Object 'System.Windows.Forms.RichTextBox'
	$Searchbutton1 = New-Object 'System.Windows.Forms.Button'
	$SearchTypecombobox = New-Object 'System.Windows.Forms.ComboBox'
	$groupbox1 = New-Object 'System.Windows.Forms.GroupBox'
	$SiteServerTextBox1 = New-Object 'System.Windows.Forms.RichTextBox'
	$SiteServertextbox2 = New-Object 'System.Windows.Forms.TextBox'
	$Connectbutton = New-Object 'System.Windows.Forms.Button'
	$SiteCodeTextBox1 = New-Object 'System.Windows.Forms.RichTextBox'
	$SiteCodeTextBox2 = New-Object 'System.Windows.Forms.TextBox'
	$savebutton1 = New-Object 'System.Windows.Forms.Button'
	$checkbox6 = New-Object 'System.Windows.Forms.CheckBox'
	$checkbox5 = New-Object 'System.Windows.Forms.CheckBox'
	$checkbox4 = New-Object 'System.Windows.Forms.CheckBox'
	$checkbox3 = New-Object 'System.Windows.Forms.CheckBox'
	$checkbox2 = New-Object 'System.Windows.Forms.CheckBox'
	$checkbox1 = New-Object 'System.Windows.Forms.CheckBox'
	$checkbox0 = New-Object 'System.Windows.Forms.CheckBox'
	$progressbaroverlay1 = New-Object 'SAPIENTypes.ProgressBarOverlay'
	$SearchStatus = New-Object 'System.Windows.Forms.RichTextBox'
	$Searchdatagridview = New-Object 'System.Windows.Forms.DataGridView'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$MainForm_Load = {
		#TODO: Initialize Form Controls here
		#Set-DataGridView -DataGridView $Searchdatagridview -AlternativeRowColor -ForeColor 'black' -BackColor 'AliceBlue'
	}
	
	#region Control Helper Functions
	function Load-ListBox {
	<#
		.SYNOPSIS
			This functions helps you load items into a ListBox or CheckedListBox.
	
		.DESCRIPTION
			Use this function to dynamically load items into the ListBox control.
	
		.PARAMETER  ListBox
			The ListBox control you want to add items to.
	
		.PARAMETER  Items
			The object or objects you wish to load into the ListBox's Items collection.
	
		.PARAMETER  DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER  Append
			Adds the item(s) to the ListBox without clearing the Items collection.
		
		.EXAMPLE
			Load-ListBox $ListBox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Load-ListBox $listBox1 "Red" -Append
			Load-ListBox $listBox1 "White" -Append
			Load-ListBox $listBox1 "Blue" -Append
		
		.EXAMPLE
			Load-ListBox $listBox1 (Get-Process) "ProcessName"
	#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.ListBox]$ListBox,
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if (-not $Append) {
			$listBox.Items.Clear()
		}
		
		if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection]) {
			$listBox.Items.AddRange($Items)
		} elseif ($Items -is [Array]) {
			$listBox.BeginUpdate()
			foreach ($obj in $Items) {
				$listBox.Items.Add($obj)
			}
			$listBox.EndUpdate()
		} else {
			$listBox.Items.Add($Items)
		}
		
		$listBox.DisplayMember = $DisplayMember
	}
	
	function Load-ComboBox {
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
	
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
	
		.PARAMETER  ComboBox
			The ComboBox control you want to add items to.
	
		.PARAMETER  Items
			The object or objects you wish to load into the ComboBox's Items collection.
	
		.PARAMETER  DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER  Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Load-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Load-ComboBox $combobox1 "Red" -Append
			Load-ComboBox $combobox1 "White" -Append
			Load-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Load-ComboBox $combobox1 (Get-Process) "ProcessName"
	#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.ComboBox]$ComboBox,
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if (-not $Append) {
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]]) {
			$ComboBox.Items.AddRange($Items)
		} elseif ($Items -is [System.Collections.IEnumerable]) {
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items) {
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		} else {
			$ComboBox.Items.Add($Items)
		}
		
		$ComboBox.DisplayMember = $DisplayMember
	}
	#endregion
	
	
	$Connectbutton_Click = {
		#TODO: Place custom script here
		Append-RichtextboxStatus -Message "Getting SiteCode information" -MessageColor 'blue'
		$SiteServer = $SiteServertextbox2.Text
		if (!$SiteServer) {
			Append-RichtextboxStatus -Message "SiteServer is empty, please input SiteServer name" -MessageColor 'red'
		} else {
			Get-CMSiteConnection -SiteServer $SiteServer
			$SiteCodeTextBox2.Text = $SiteCode
			
		}
		
	}
	
	$Searchbutton1_Click = {
		#TODO: Place custom script here
		$SearchTypecombobox.Enabled = $false
		$Searchbutton1.Enabled = $false
		$Searchdatagridview.Rows.Clear()
		$Searchdatagridview.Columns.Clear()
		$progressbaroverlay1.Visible = $true
		$searchtype = $SearchTypecombobox.SelectedItem
		
		$checkbox6.add_CheckedChanged($checkbox6_CheckedChanged)
		$checkbox5.add_CheckedChanged($checkbox5_CheckedChanged)
		$checkbox4.add_CheckedChanged($checkbox4_CheckedChanged)
		$checkbox3.add_CheckedChanged($checkbox3_CheckedChanged)
		$checkbox0.add_CheckedChanged($checkbox0_CheckedChanged)
		$Searchdatagridview.add_CellValueChanged($Searchdatagridview_CellValueChanged)
		
		if ($searchtype -eq 'Applications (MSI and Script Installer)') {
			Search-Applications -SiteCode $SiteCode -SiteServer $SiteServer -InstallerType MSIorScript
			$SearchTypecombobox.Enabled = $true
		}
		if ($searchtype -eq 'Applications (APPV-4)') {
			Search-Applications -SiteCode $SiteCode -SiteServer $SiteServer -InstallerType APPV4
			$SearchTypecombobox.Enabled = $true
		}
		if ($searchtype -eq 'Applications (APPV-5)') {
			Search-Applications -SiteCode $SiteCode -SiteServer $SiteServer -InstallerType APPV5
			$SearchTypecombobox.Enabled = $true
		}
		if ($searchtype -eq 'Packages (Advertised)') {
			Search-Packages -SiteCode $SiteCode -SiteServer $SiteServer
			$SearchTypecombobox.Enabled = $true
		}
		
	}
	
	
	$SearchTypecombobox_SelectedIndexChanged = {
		#TODO: Place custom script here
		$checkbox6.remove_CheckedChanged($checkbox6_CheckedChanged)
		$checkbox5.remove_CheckedChanged($checkbox5_CheckedChanged)
		$checkbox4.remove_CheckedChanged($checkbox4_CheckedChanged)
		$checkbox3.remove_CheckedChanged($checkbox3_CheckedChanged)
		$checkbox0.remove_CheckedChanged($checkbox0_CheckedChanged)
		$Searchdatagridview.remove_CellValueChanged($Searchdatagridview_CellValueChanged)
		
		
		$checkbox0.CheckState = 'Unchecked'
		$checkbox3.CheckState = 'Unchecked'
		$checkbox4.CheckState = 'Unchecked'
		$checkbox5.CheckState = 'Unchecked'
		$checkbox6.CheckState = 'Unchecked'
		$checkbox0.Visible = $false
		$checkbox3.Visible = $false
		$checkbox4.Visible = $false
		$checkbox5.Visible = $false
		$checkbox6.Visible = $false
		
		$Searchdatagridview.Rows.Clear()
		$Searchdatagridview.Columns.Clear()
		$Searchbutton1.Enabled = $true
		$progressbaroverlay1.Value = 0
		$progressbaroverlay1.TextOverlay = ''
		$savebutton1.Enabled = $false
		
	}
	
	
	$MainForm_FormClosing = [System.Windows.Forms.FormClosingEventHandler]{
		#Event Argument: $_ = [System.Windows.Forms.FormClosingEventArgs]
		#TODO: Place custom script here
		Set-Location -Path $env:SystemDrive
	}
	
	
	
	$SiteServertextbox2_TextChanged = {
		#TODO: Place custom script here
		$SearchTypecombobox.SelectedItem = $SearchTypecombobox.Items[0]
		$SearchTypecombobox.Enabled = $false
		$Searchbutton1.Enabled = $false
		$Searchdatagridview.Datasource = $null
		$SiteCodeTextBox2.Text = $null
		$progressbaroverlay1.Visible = $false
	}
	
	$Searchdatagridview_CellValueChanged = [System.Windows.Forms.DataGridViewCellEventHandler]{
		#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
		#TODO: Place custom script here
		param ($Sender,
			$EventArgs)
		
		if ($EventArgs.ColumnIndex -eq 0 -and $Sender.CurrentRow.Index -ne $null) {
			foreach ($RowIndex in 0..($Sender.Rows.Count - 1)) {
				#$Sender.Rows[$RowIndex].Selected = [bool]$Sender.Rows[$RowIndex].Cells[$EventArgs.ColumnIndex].Value
				$Sender.Rows[$RowIndex].Selected = [bool]$Sender.Rows[$RowIndex].Cells[0].Value
				if ($Sender.Rows[$RowIndex].Selected -eq $true) {
					$Sender.Rows[$RowIndex].Cells[3].readonly = $false
					$Sender.Rows[$RowIndex].Cells[4].readonly = $false
					$Sender.Rows[$RowIndex].Cells[5].readonly = $false
					$Sender.Rows[$RowIndex].Cells[6].readonly = $false
					$Sender.Rows[$RowIndex].Cells[0].Style.ForeColor = 'Red'
					$Sender.Rows[$RowIndex].Cells[1].Style.ForeColor = 'Red'
					$Sender.Rows[$RowIndex].Cells[2].Style.ForeColor = 'Red'
					$Sender.Rows[$RowIndex].Cells[3].Style.ForeColor = 'Red'
					$Sender.Rows[$RowIndex].Cells[4].Style.ForeColor = 'Red'
					$Sender.Rows[$RowIndex].Cells[0].Style.BackColor = 'PeachPuff'
					$Sender.Rows[$RowIndex].Cells[1].Style.BackColor = 'PeachPuff'
					$Sender.Rows[$RowIndex].Cells[2].Style.BackColor = 'PeachPuff'
					$Sender.Rows[$RowIndex].Cells[3].Style.BackColor = 'PeachPuff'
					$Sender.Rows[$RowIndex].Cells[4].Style.BackColor = 'PeachPuff'
					$Sender.Rows[$RowIndex].Cells[5].Style.BackColor = 'PeachPuff'
					$Sender.Rows[$RowIndex].Cells[6].Style.BackColor = 'PeachPuff'
				}
				if ($Sender.Rows[$RowIndex].Selected -eq $false) {
					$Sender.Rows[$RowIndex].Cells[3].readonly = $true
					$Sender.Rows[$RowIndex].Cells[4].readonly = $true
					$Sender.Rows[$RowIndex].Cells[5].readonly = $true
					$Sender.Rows[$RowIndex].Cells[6].readonly = $true
					$Sender.Rows[$RowIndex].Cells[0].Style.ForeColor = 'black'
					$Sender.Rows[$RowIndex].Cells[1].Style.ForeColor = 'black'
					$Sender.Rows[$RowIndex].Cells[2].Style.ForeColor = 'black'
					$Sender.Rows[$RowIndex].Cells[3].Style.ForeColor = 'black'
					$Sender.Rows[$RowIndex].Cells[4].Style.ForeColor = 'black'
					$Sender.Rows[$RowIndex].Cells[0].Style.BackColor = 'white'
					$Sender.Rows[$RowIndex].Cells[1].Style.BackColor = 'white'
					$Sender.Rows[$RowIndex].Cells[2].Style.BackColor = 'white'
					$Sender.Rows[$RowIndex].Cells[3].Style.BackColor = 'white'
					$Sender.Rows[$RowIndex].Cells[4].Style.BackColor = 'white'
					$Sender.Rows[$RowIndex].Cells[5].Style.BackColor = 'white'
					$Sender.Rows[$RowIndex].Cells[6].Style.BackColor = 'white'
				}
			}
		}
	}
	
	
	$checkbox0_CheckedChanged = {
		#TODO: Place custom script here
		#progressbar
		$SelectedRowCount = 0
		$AllRowCount = 0
		for ($RowIndex = 0; $RowIndex -lt $Searchdatagridview.RowCount; $RowIndex++) {
			$AllRowCount++
		}
		$progressbaroverlay1.Step = 1
		$progressbaroverlay1.Value = 0
		$progressbaroverlay1.TextOverlay = ''
		$progressbaroverlay1.Maximum = $AllRowCount
		
		if ($checkbox0.checked -eq $true) {
			$checkbox0.Enabled = $false
			
			Append-RichtextboxStatus -Message "Selecting all check boxes, please wait..." -MessageColor 'blue'
			
			$Searchdatagridview.Columns[3].ReadOnly = $false
			$Searchdatagridview.Columns[4].ReadOnly = $false
			$Searchdatagridview.Columns[5].ReadOnly = $false
			$Searchdatagridview.Columns[6].ReadOnly = $false
			
			for ($RowIndex = 0; $RowIndex -lt $Searchdatagridview.RowCount; $RowIndex++) {
				#progressbar
				$SelectedRowCount++
				$progressbaroverlay1.TextOverlay = "Selecting checkboxes $($SelectedRowCount) / $($AllRowCount)"
				[System.Windows.Forms.Application]::DoEvents()
				$progressbaroverlay1.PerformStep()
				
				$Searchdatagridview.Rows[$RowIndex].cells[0].value = $true
				$selectedname = $($Searchdatagridview.Rows[$RowIndex].cells[2].value)
				Append-RichtextboxStatus -Message "Selected $selectedname" -MessageColor 'blue'
			}
			
			Append-RichtextboxStatus -Message "Done" -MessageColor 'green'
			$progressbaroverlay1.TextOverlay = 'All selected!'
			
			$checkbox0.Enabled = $true
			$checkbox3.visible = $true
			$checkbox4.visible = $true
			$checkbox5.visible = $true
			$checkbox6.visible = $true
		}
		
		if ($checkbox0.checked -eq $false) {
			Append-RichtextboxStatus -Message "De-selecting all check boxes, please wait..." -MessageColor 'blue'
			$checkbox0.Enabled = $false
			
			$Searchdatagridview.Columns[3].ReadOnly = $true
			$Searchdatagridview.Columns[4].ReadOnly = $true
			$Searchdatagridview.Columns[5].ReadOnly = $true
			$Searchdatagridview.Columns[6].ReadOnly = $true
			
			
			for ($RowIndex = 0; $RowIndex -lt $Searchdatagridview.RowCount; $RowIndex++) {
				#progressbar
				$SelectedRowCount++
				$progressbaroverlay1.TextOverlay = "Deselecting checkboxes $($SelectedRowCount) / $($AllRowCount)"
				[System.Windows.Forms.Application]::DoEvents()
				$progressbaroverlay1.PerformStep()
				
				
				$Searchdatagridview.Rows[$RowIndex].cells[0].value = $false
				$selectedname = $($Searchdatagridview.Rows[$RowIndex].cells[2].value)
				Append-RichtextboxStatus -Message "Deselected $selectedname" -MessageColor 'blue'
			}
			Append-RichtextboxStatus -Message "Done" -MessageColor 'green'
			$progressbaroverlay1.TextOverlay = 'All unselected!'
			
			$checkbox0.Enabled = $true
			$checkbox3.visible = $false
			$checkbox4.visible = $false
			$checkbox5.visible = $false
			$checkbox6.visible = $false
		}
		
	}
	
	$checkbox3_CheckedChanged = {
		#TODO: Place custom script here
		if ($checkbox3.checked -eq $true) {
			for ($RowIndex = 0; $RowIndex -lt $Searchdatagridview.RowCount; $RowIndex++) {
				$Searchdatagridview.Rows[$RowIndex].cells[3].value = $true
			}
		}
		
		if ($checkbox3.checked -eq $false) {
			for ($RowIndex = 0; $RowIndex -lt $Searchdatagridview.RowCount; $RowIndex++) {
				$Searchdatagridview.Rows[$RowIndex].cells[3].value = $false
			}
		}
	}
	
	$checkbox4_CheckedChanged = {
		#TODO: Place custom script here	
		if ($checkbox4.checked -eq $true) {
			for ($RowIndex = 0; $RowIndex -lt $Searchdatagridview.RowCount; $RowIndex++) {
				$Searchdatagridview.Rows[$RowIndex].cells[4].value = $true
			}
		}
		
		if ($checkbox4.checked -eq $false) {
			for ($RowIndex = 0; $RowIndex -lt $Searchdatagridview.RowCount; $RowIndex++) {
				$Searchdatagridview.Rows[$RowIndex].cells[4].value = $false
			}
		}
	}
	
	$checkbox5_CheckedChanged = {
		#TODO: Place custom script here
		if ($checkbox5.checked -eq $true) {
			for ($RowIndex = 0; $RowIndex -lt $Searchdatagridview.RowCount; $RowIndex++) {
				$Searchdatagridview.Rows[$RowIndex].cells[5].value = $true
			}
		}
		
		if ($checkbox5.checked -eq $false) {
			for ($RowIndex = 0; $RowIndex -lt $Searchdatagridview.RowCount; $RowIndex++) {
				$Searchdatagridview.Rows[$RowIndex].cells[5].value = $false
			}
		}
	}
	
	$checkbox6_CheckedChanged = {
		#TODO: Place custom script here
		if ($checkbox6.checked -eq $true) {
			for ($RowIndex = 0; $RowIndex -lt $Searchdatagridview.RowCount; $RowIndex++) {
				$Searchdatagridview.Rows[$RowIndex].cells[6].value = $true
			}
		}
		
		if ($checkbox6.checked -eq $false) {
			for ($RowIndex = 0; $RowIndex -lt $Searchdatagridview.RowCount; $RowIndex++) {
				$Searchdatagridview.Rows[$RowIndex].cells[6].value = $false
			}
		}
	}
	
	
	$savebutton1_Click = {
		#TODO: Place custom script here
		$savebutton1.Enabled = $false
		$searchtype = $SearchTypecombobox.SelectedItem
		
		if ($searchtype -eq 'Applications (MSI and Script Installer)') {
			Update-ApplicationContentSettings -SiteCode $SiteCode -SiteServer $SiteServer -InstallerType MSIorScript
		}
		if ($searchtype -eq 'Applications (APPV-4)') {
			Update-ApplicationContentSettings -SiteCode $SiteCode -SiteServer $SiteServer -InstallerType APPV4
		}
		if ($searchtype -eq 'Applications (APPV-5)') {
			Update-ApplicationContentSettings -SiteCode $SiteCode -SiteServer $SiteServer -InstallerType APPV5
		}
		if ($searchtype -eq 'Packages (Advertised)') {	
			$OUTPUT = Display-MsgBox -Title "Double Check" -Message "Please make sure same PackageName should have same PersistCache setting. Do you want to continue without check them again?" -ButtonSetup 4
			if ($OUTPUT -eq "YES") {
				Update-PackageContentSettings -SiteCode $SiteCode -SiteServer $SiteServer
			}
			if ($OUTPUT -eq "NO") {
				$savebutton1.Enabled = $true
			}
		}
	}
	
	
	
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$MainForm.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_SelectSearchTyperichtextbox1 = $SelectSearchTyperichtextbox1.Text
		$script:MainForm_SearchTypecombobox = $SearchTypecombobox.Text
		$script:MainForm_SearchTypecombobox_SelectedItem = $SearchTypecombobox.SelectedItem
		$script:MainForm_SiteServerTextBox1 = $SiteServerTextBox1.Text
		$script:MainForm_SiteServertextbox2 = $SiteServertextbox2.Text
		$script:MainForm_SiteCodeTextBox1 = $SiteCodeTextBox1.Text
		$script:MainForm_SiteCodeTextBox2 = $SiteCodeTextBox2.Text
		$script:MainForm_checkbox6 = $checkbox6.Checked
		$script:MainForm_checkbox5 = $checkbox5.Checked
		$script:MainForm_checkbox4 = $checkbox4.Checked
		$script:MainForm_checkbox3 = $checkbox3.Checked
		$script:MainForm_checkbox2 = $checkbox2.Checked
		$script:MainForm_checkbox1 = $checkbox1.Checked
		$script:MainForm_checkbox0 = $checkbox0.Checked
		$script:MainForm_SearchStatus = $SearchStatus.Text
		$script:MainForm_Searchdatagridview = $Searchdatagridview.SelectedCells
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$Searchbutton1.remove_Click($Searchbutton1_Click)
			$SearchTypecombobox.remove_SelectedIndexChanged($SearchTypecombobox_SelectedIndexChanged)
			$SiteServertextbox2.remove_TextChanged($SiteServertextbox2_TextChanged)
			$Connectbutton.remove_Click($Connectbutton_Click)
			$savebutton1.remove_Click($savebutton1_Click)
			$checkbox5.remove_CheckedChanged($checkbox5_CheckedChanged)
			$checkbox4.remove_CheckedChanged($checkbox4_CheckedChanged)
			$checkbox3.remove_CheckedChanged($checkbox3_CheckedChanged)
			$checkbox0.remove_CheckedChanged($checkbox0_CheckedChanged)
			$Searchdatagridview.remove_CellValueChanged($Searchdatagridview_CellValueChanged)
			$MainForm.remove_FormClosing($MainForm_FormClosing)
			$MainForm.remove_Load($MainForm_Load)
			$MainForm.remove_Load($Form_StateCorrection_Load)
			$MainForm.remove_Closing($Form_StoreValues_Closing)
			$MainForm.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$MainForm.SuspendLayout()
	$groupbox2.SuspendLayout()
	$groupbox1.SuspendLayout()
	#
	# MainForm
	#
	$MainForm.Controls.Add($groupbox2)
	$MainForm.Controls.Add($groupbox1)
	$MainForm.Controls.Add($SiteCodeTextBox1)
	$MainForm.Controls.Add($SiteCodeTextBox2)
	$MainForm.Controls.Add($savebutton1)
	$MainForm.Controls.Add($checkbox6)
	$MainForm.Controls.Add($checkbox5)
	$MainForm.Controls.Add($checkbox4)
	$MainForm.Controls.Add($checkbox3)
	$MainForm.Controls.Add($checkbox2)
	$MainForm.Controls.Add($checkbox1)
	$MainForm.Controls.Add($checkbox0)
	$MainForm.Controls.Add($progressbaroverlay1)
	$MainForm.Controls.Add($SearchStatus)
	$MainForm.Controls.Add($Searchdatagridview)
	$MainForm.AutoScaleDimensions = '6, 13'
	$MainForm.AutoScaleMode = 'Font'
	$MainForm.BackColor = 'White'
	$MainForm.ClientSize = '1201, 733'
	$MainForm.FormBorderStyle = 'FixedSingle'
	$MainForm.MaximizeBox = $False
	$MainForm.MaximumSize = '1254, 762'
	$MainForm.Name = 'MainForm'
	$MainForm.ShowIcon = $False
	$MainForm.StartPosition = 'CenterScreen'
	$MainForm.Text = 'SCCM Set Content Tool 2.2'
	$MainForm.add_FormClosing($MainForm_FormClosing)
	$MainForm.add_Load($MainForm_Load)
	#
	# groupbox2
	#
	$groupbox2.Controls.Add($SelectSearchTyperichtextbox1)
	$groupbox2.Controls.Add($Searchbutton1)
	$groupbox2.Controls.Add($SearchTypecombobox)
	$groupbox2.Location = '408, 12'
	$groupbox2.Name = 'groupbox2'
	$groupbox2.Size = '453, 115'
	$groupbox2.TabIndex = 27
	$groupbox2.TabStop = $False
	$groupbox2.Text = 'Choose Search'
	#
	# SelectSearchTyperichtextbox1
	#
	$SelectSearchTyperichtextbox1.BorderStyle = 'None'
	$SelectSearchTyperichtextbox1.Font = 'Microsoft Sans Serif, 10pt, style=Bold'
	$SelectSearchTyperichtextbox1.Location = '21, 33'
	$SelectSearchTyperichtextbox1.Name = 'SelectSearchTyperichtextbox1'
	$SelectSearchTyperichtextbox1.Size = '110, 21'
	$SelectSearchTyperichtextbox1.TabIndex = 10
	$SelectSearchTyperichtextbox1.Text = 'Search Type:'
	#
	# Searchbutton1
	#
	$Searchbutton1.Enabled = $False
	$Searchbutton1.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$Searchbutton1.Location = '329, 65'
	$Searchbutton1.Name = 'Searchbutton1'
	$Searchbutton1.Size = '105, 29'
	$Searchbutton1.TabIndex = 5
	$Searchbutton1.Text = 'Search'
	$Searchbutton1.UseVisualStyleBackColor = $True
	$Searchbutton1.add_Click($Searchbutton1_Click)
	#
	# SearchTypecombobox
	#
	$SearchTypecombobox.DropDownStyle = 'DropDownList'
	$SearchTypecombobox.Enabled = $False
	$SearchTypecombobox.FormattingEnabled = $True
	[void]$SearchTypecombobox.Items.Add('Applications (MSI and Script Installer)')
	[void]$SearchTypecombobox.Items.Add('Applications (APPV-4)')
	[void]$SearchTypecombobox.Items.Add('Applications (APPV-5)')
	[void]$SearchTypecombobox.Items.Add('Packages (Advertised)')
	$SearchTypecombobox.Location = '6, 73'
	$SearchTypecombobox.Name = 'SearchTypecombobox'
	$SearchTypecombobox.Size = '299, 21'
	$SearchTypecombobox.TabIndex = 9
	$SearchTypecombobox.add_SelectedIndexChanged($SearchTypecombobox_SelectedIndexChanged)
	#
	# groupbox1
	#
	$groupbox1.Controls.Add($SiteServerTextBox1)
	$groupbox1.Controls.Add($SiteServertextbox2)
	$groupbox1.Controls.Add($Connectbutton)
	$groupbox1.Location = '12, 12'
	$groupbox1.Name = 'groupbox1'
	$groupbox1.Size = '390, 115'
	$groupbox1.TabIndex = 26
	$groupbox1.TabStop = $False
	$groupbox1.Text = 'Input Site Information'
	#
	# SiteServerTextBox1
	#
	$SiteServerTextBox1.BackColor = 'White'
	$SiteServerTextBox1.BorderStyle = 'None'
	$SiteServerTextBox1.Font = 'Microsoft Sans Serif, 10pt, style=Bold'
	$SiteServerTextBox1.Location = '19, 33'
	$SiteServerTextBox1.Name = 'SiteServerTextBox1'
	$SiteServerTextBox1.ReadOnly = $True
	$SiteServerTextBox1.Size = '95, 21'
	$SiteServerTextBox1.TabIndex = 2
	$SiteServerTextBox1.Text = 'Site Server:'
	#
	# SiteServertextbox2
	#
	$SiteServertextbox2.CharacterCasing = 'Upper'
	$SiteServertextbox2.Font = 'Microsoft Sans Serif, 8.25pt'
	$SiteServertextbox2.Location = '19, 74'
	$SiteServertextbox2.Name = 'SiteServertextbox2'
	$SiteServertextbox2.Size = '244, 20'
	$SiteServertextbox2.TabIndex = 12
	$SiteServertextbox2.add_TextChanged($SiteServertextbox2_TextChanged)
	#
	# Connectbutton
	#
	$Connectbutton.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$Connectbutton.Location = '279, 65'
	$Connectbutton.Name = 'Connectbutton'
	$Connectbutton.Size = '105, 29'
	$Connectbutton.TabIndex = 13
	$Connectbutton.Text = 'Connect'
	$Connectbutton.UseVisualStyleBackColor = $True
	$Connectbutton.add_Click($Connectbutton_Click)
	#
	# SiteCodeTextBox1
	#
	$SiteCodeTextBox1.BackColor = 'White'
	$SiteCodeTextBox1.BorderStyle = 'None'
	$SiteCodeTextBox1.Font = 'Microsoft Sans Serif, 10pt, style=Bold'
	$SiteCodeTextBox1.ForeColor = 'WindowText'
	$SiteCodeTextBox1.Location = '884, 24'
	$SiteCodeTextBox1.Name = 'SiteCodeTextBox1'
	$SiteCodeTextBox1.ReadOnly = $True
	$SiteCodeTextBox1.Size = '101, 21'
	$SiteCodeTextBox1.TabIndex = 1
	$SiteCodeTextBox1.Text = 'SiteCode is:'
	#
	# SiteCodeTextBox2
	#
	$SiteCodeTextBox2.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$SiteCodeTextBox2.ForeColor = 'DodgerBlue'
	$SiteCodeTextBox2.Location = '991, 24'
	$SiteCodeTextBox2.Name = 'SiteCodeTextBox2'
	$SiteCodeTextBox2.ReadOnly = $True
	$SiteCodeTextBox2.Size = '124, 20'
	$SiteCodeTextBox2.TabIndex = 14
	#
	# savebutton1
	#
	$savebutton1.Font = 'Microsoft Sans Serif, 10pt, style=Bold'
	$savebutton1.ForeColor = 'Navy'
	$savebutton1.Location = '950, 73'
	$savebutton1.Name = 'savebutton1'
	$savebutton1.Size = '140, 44'
	$savebutton1.TabIndex = 25
	$savebutton1.Text = 'Save Changes'
	$savebutton1.UseVisualStyleBackColor = $True
	$savebutton1.add_Click($savebutton1_Click)
	#
	# checkbox6
	#
	$checkbox6.Location = '1138, 156'
	$checkbox6.Name = 'checkbox6'
	$checkbox6.Size = '15, 15'
	$checkbox6.TabIndex = 24
	$checkbox6.UseVisualStyleBackColor = $True
	$checkbox6.Visible = $False
	#
	# checkbox5
	#
	$checkbox5.Location = '960, 156'
	$checkbox5.Name = 'checkbox5'
	$checkbox5.Size = '15, 15'
	$checkbox5.TabIndex = 23
	$checkbox5.UseVisualStyleBackColor = $True
	$checkbox5.Visible = $False
	$checkbox5.add_CheckedChanged($checkbox5_CheckedChanged)
	#
	# checkbox4
	#
	$checkbox4.Location = '837, 156'
	$checkbox4.Name = 'checkbox4'
	$checkbox4.Size = '15, 15'
	$checkbox4.TabIndex = 22
	$checkbox4.UseVisualStyleBackColor = $True
	$checkbox4.Visible = $False
	$checkbox4.add_CheckedChanged($checkbox4_CheckedChanged)
	#
	# checkbox3
	#
	$checkbox3.Location = '715, 156'
	$checkbox3.Name = 'checkbox3'
	$checkbox3.Size = '15, 15'
	$checkbox3.TabIndex = 21
	$checkbox3.UseVisualStyleBackColor = $True
	$checkbox3.Visible = $False
	$checkbox3.add_CheckedChanged($checkbox3_CheckedChanged)
	#
	# checkbox2
	#
	$checkbox2.Location = '595, 156'
	$checkbox2.Name = 'checkbox2'
	$checkbox2.Size = '15, 15'
	$checkbox2.TabIndex = 20
	$checkbox2.UseVisualStyleBackColor = $True
	$checkbox2.Visible = $False
	#
	# checkbox1
	#
	$checkbox1.Location = '314, 156'
	$checkbox1.Name = 'checkbox1'
	$checkbox1.Size = '15, 15'
	$checkbox1.TabIndex = 19
	$checkbox1.UseVisualStyleBackColor = $True
	$checkbox1.Visible = $False
	#
	# checkbox0
	#
	$checkbox0.Location = '69, 156'
	$checkbox0.Name = 'checkbox0'
	$checkbox0.Size = '15, 15'
	$checkbox0.TabIndex = 18
	$checkbox0.UseVisualStyleBackColor = $True
	$checkbox0.Visible = $False
	$checkbox0.add_CheckedChanged($checkbox0_CheckedChanged)
	#
	# progressbaroverlay1
	#
	$progressbaroverlay1.Location = '4, 681'
	$progressbaroverlay1.MaximumSize = '1230, 30'
	$progressbaroverlay1.Name = 'progressbaroverlay1'
	$progressbaroverlay1.Size = '1196, 30'
	$progressbaroverlay1.Step = 1
	$progressbaroverlay1.TabIndex = 15
	$progressbaroverlay1.Visible = $False
	#
	# SearchStatus
	#
	$SearchStatus.Location = '4, 551'
	$SearchStatus.MaximumSize = '1230, 124'
	$SearchStatus.Name = 'SearchStatus'
	$SearchStatus.Size = '1196, 124'
	$SearchStatus.TabIndex = 7
	$SearchStatus.Text = ''
	#
	# Searchdatagridview
	#
	$Searchdatagridview.AllowUserToAddRows = $False
	$Searchdatagridview.AllowUserToDeleteRows = $False
	$Searchdatagridview.AllowUserToResizeColumns = $False
	$Searchdatagridview.AutoSizeRowsMode = 'AllCells'
	$Searchdatagridview.ColumnHeadersHeight = 30
	$System_Windows_Forms_DataGridViewCellStyle_1 = New-Object 'System.Windows.Forms.DataGridViewCellStyle'
	$System_Windows_Forms_DataGridViewCellStyle_1.Alignment = 'MiddleLeft'
	$System_Windows_Forms_DataGridViewCellStyle_1.BackColor = 'Window'
	$System_Windows_Forms_DataGridViewCellStyle_1.Font = 'Microsoft Sans Serif, 8.25pt'
	$System_Windows_Forms_DataGridViewCellStyle_1.ForeColor = 'ControlText'
	$System_Windows_Forms_DataGridViewCellStyle_1.SelectionBackColor = 'Highlight'
	$System_Windows_Forms_DataGridViewCellStyle_1.SelectionForeColor = 'HighlightText'
	$System_Windows_Forms_DataGridViewCellStyle_1.WrapMode = 'True'
	$Searchdatagridview.DefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_1
	$Searchdatagridview.Location = '4, 147'
	$Searchdatagridview.MaximumSize = '1230, 398'
	$Searchdatagridview.Name = 'Searchdatagridview'
	$Searchdatagridview.RowHeadersVisible = $False
	$Searchdatagridview.SelectionMode = 'FullRowSelect'
	$Searchdatagridview.Size = '1196, 398'
	$Searchdatagridview.TabIndex = 6
	$Searchdatagridview.add_CellValueChanged($Searchdatagridview_CellValueChanged)
	$groupbox1.ResumeLayout()
	$groupbox2.ResumeLayout()
	$MainForm.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $MainForm.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$MainForm.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$MainForm.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$MainForm.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $MainForm.ShowDialog()

}
#endregion Source: MainForm.psf

#region Source: Globals.ps1
	#--------------------------------------------
	# Declare Global Variables and Functions here
	#--------------------------------------------
	
	
	#Sample function that provides the location of the script
	function Get-ScriptDirectory
	{
	<#
		.SYNOPSIS
			Get-ScriptDirectory returns the proper location of the script.
	
		.OUTPUTS
			System.String
		
		.NOTES
			Returns the correct path within a packaged executable.
	#>
		[OutputType([string])]
		param ()
		if ($hostinvocation -ne $null)
		{
			Split-Path $hostinvocation.MyCommand.path
		}
		else
		{
			Split-Path $script:MyInvocation.MyCommand.Path
		}
	}
	
	
	#Sample variable that provides the location of the script
	[string]$ScriptDirectory = Get-ScriptDirectory
	
	function Append-RichtextboxStatus
	{
		PARAM (
			[Parameter(Mandatory = $true)]
			[string]$Message,
			[string]$MessageColor = "DarkGreen",
			[string]$DateTimeColor = "Black",
			[string]$Source,
			[string]$SourceColor = "Gray",
			[String]$ComputerNameColor = "Blue")
		
		$SortableTime = get-date -Format "yyyy-MM-dd HH:mm:ss"
		$SearchStatus.SelectionColor = $DateTimeColor
		$SearchStatus.AppendText("[$SortableTime] ")
		
		IF ($PSBoundParameters['ComputerName'])
		{
			$SearchStatus.SelectionColor = $ComputerNameColor
			$SearchStatus.AppendText(("$ComputerName ").ToUpper())
		}
		
		IF ($PSBoundParameters['Source'])
		{
			$SearchStatus.SelectionColor = $SourceColor
			$SearchStatus.AppendText("$Source ")
		}
		
		$SearchStatus.SelectionColor = $MessageColor
		$SearchStatus.AppendText("$Message`r")
		$SearchStatus.Refresh()
		$SearchStatus.ScrollToCaret()
		
		Write-Verbose -Message "$SortableTime $Message"
	}
	
	Function Display-MsgBox
	{
		# -Style:
		# 16 Error
		# 32 Question
		# 48 Exclamation
		# 64 Information
		
		# -ButtonSetup
		# 0 OK
		# 1 OKCancel
		# 2 AbortRetryIgnore
		# 3 YesNoCancel
		# 4 YesNo
		# 5 RetryCancel
		
		param (
			[Parameter(Mandatory = $true, Position = 1)]
			$Message,
			[Parameter(Mandatory = $true, Position = 2)]
			$Title,
			[Parameter(Mandatory = $false, Position = 3)]
			$Style = 64,
			[Parameter(Mandatory = $false, Position = 4)]
			$ButtonSetup = 0
		)
		[System.Windows.Forms.MessageBox]::Show($Message, $Title, $ButtonSetup, $Style)
		
	}
	
	
	function Get-CMSiteConnection
	{
		[CmdletBinding(SupportsShouldProcess = $true)]
		param (
			[parameter(Mandatory = $true)]
			[ValidateNotNullOrEmpty()]
			[string]$SiteServer
		)
		#Set component
		$component = "Get SiteCode"
		# Determine Site Code
		try
		{
			$SiteCodeObjects = Get-WmiObject -Namespace "root\SMS" -Class SMS_ProviderLocation -ComputerName $SiteServer -ErrorAction Stop
			foreach ($SiteCodeObject in $SiteCodeObjects)
			{
				if ($SiteCodeObject.ProviderForLocalSite -eq $true)
				{
					$SiteCode = $SiteCodeObject.SiteCode
					Append-RichtextboxStatus -Source $component -Message "Found Site Code $SiteCode" -MessageColor 'Green'
					
					#Enable Search boxes
					$SearchTypecombobox.Enabled = $true
					$Searchbutton1.Enabled = $true
				}
			}
		}
		catch [System.UnauthorizedAccessException] {
			Display-MsgBox -Title "Error" -Message "Access denied, please check if you have access rights to your siteserver" -ButtonSetup 0
			Append-RichtextboxStatus -Source $component -Message "Access denied" -MessageColor 'red'; break
		}
		catch [System.Exception] {
			Display-MsgBox -Title "Error" -Message "Unable to determine Site Code" -ButtonSetup 0
			Append-RichtextboxStatus -Source $component -Message "Unable to determine Site Code" -MessageColor 'red'; break
		}
		# import ConfigurationManager Module
		try
		{
			$CMModulePath = Join-Path -Path (Split-Path -Path "${Env:SMS_ADMIN_UI_PATH}" -ErrorAction Stop) -ChildPath "ConfigurationManager.psd1"
			Import-Module $CMModulePath -ErrorAction Stop
		}
		catch [System.Exception] {
			Display-MsgBox -Title "Error" -Message "Unable to load ConfigurationManager Module, please install Admin Console" -ButtonSetup 0
			Append-RichtextboxStatus -Source $component -Message "Unable to load ConfigurationManager Module, please install Admin Console" -MessageColor 'red'; break
		}
		
		$Global:SiteCode = $SiteCode
		$global:SiteServer = $SiteServer
		return $SiteCode
		return $SiteServer
	}
	
	
	function Search-Applications
	{
		[CmdletBinding(SupportsShouldProcess = $true)]
		param (
			[parameter(Mandatory = $true)]
			[ValidateNotNullOrEmpty()]
			[string]$SiteServer,
			[parameter(Mandatory = $true)]
			[ValidateNotNullOrEmpty()]
			[string]$SiteCode,
			[ValidateSet("MSIorScript", "APPV4", "APPV5")]
			[string]$InstallerType
		)
		$SearchResults = $null
		$component = "Search Applications"
		
		#Create Columns
		$ApplicationDisplayName = New-Object 'System.Windows.Forms.DataGridViewTextBoxColumn'
		$DeploymentTypeName = New-Object 'System.Windows.Forms.DataGridViewTextBoxColumn'
		$PersistCache = New-Object 'System.Windows.Forms.DataGridViewCheckBoxColumn'
		$BranchCache = New-Object 'System.Windows.Forms.DataGridViewCheckBoxColumn'
		$FallbackToDP = New-Object 'System.Windows.Forms.DataGridViewCheckBoxColumn'
		$Select = New-Object 'System.Windows.Forms.DataGridViewCheckBoxColumn'
		if ($InstallerType -like 'MSIorScript')
		{
			$DownloadOnSlowNetwork = New-Object 'System.Windows.Forms.DataGridViewCheckBoxColumn'
		}
		if ($InstallerType -like 'APPV4' -or $InstallerType -like 'APPV5')
		{
			$DownloadOnSlowNetwork = New-Object 'System.Windows.Forms.DataGridViewComboBoxColumn'
		}
		#
		#
		#
		[void]$Searchdatagridview.Columns.Add($Select)
		[void]$Searchdatagridview.Columns.Add($ApplicationDisplayName)
		[void]$Searchdatagridview.Columns.Add($DeploymentTypeName)
		[void]$Searchdatagridview.Columns.Add($PersistCache)
		[void]$Searchdatagridview.Columns.Add($BranchCache)
		[void]$Searchdatagridview.Columns.Add($FallbackToDP)
		[void]$Searchdatagridview.Columns.Add($DownloadOnSlowNetwork)
		
		
		#
		#	# Select
		#
		#$Select.HeaderText = 'Select for modify'
		$Select.Name = 'Select'
		$Select.ReadOnly = $false
		$Select.SortMode = 'Automatic'
		$Select.Width = 100
		$Select.DisplayIndex = 0
		
		#
		# ApplicationDisplayName
		#
		#$ApplicationDisplayName.DataPropertyName = "$ApplicationDisplayName"
		$ApplicationDisplayName.HeaderText = 'ApplicationDisplayName'
		$ApplicationDisplayName.Name = 'ApplicationDisplayName'
		$ApplicationDisplayName.ReadOnly = $True
		$ApplicationDisplayName.SortMode = 'Automatic'
		$ApplicationDisplayName.Width = 250
		$ApplicationDisplayName.DisplayIndex = 1
		
		#
		# DeploymentTypeName
		#
		#$DeploymentTypeName.DataPropertyName = "$DeploymentTypeName"
		$DeploymentTypeName.HeaderText = 'DeploymentTypeName'
		$DeploymentTypeName.Name = 'DeploymentTypeName'
		$DeploymentTypeName.ReadOnly = $True
		$DeploymentTypeName.SortMode = 'Automatic'
		$DeploymentTypeName.Width = 280
		$DeploymentTypeName.DisplayIndex = 2
		#
		# PersistCache
		#
		#$PersistCache.DataPropertyName = "$PinOnClient"
		$PersistCache.HeaderText = 'PersistCache'
		$PersistCache.Name = 'PersistCache'
		$PersistCache.ReadOnly = $true
		$PersistCache.SortMode = 'Automatic'
		$PersistCache.Width = 120
		$PersistCache.DisplayIndex = 3
		#
		# BranchCache
		#
		#$BranchCache.DataPropertyName = "$BranchCache"
		$BranchCache.HeaderText = 'BranchCache'
		$BranchCache.Name = 'BranchCache'
		$BranchCache.ReadOnly = $true
		$BranchCache.SortMode = 'Automatic'
		$BranchCache.Width = 120
		$BranchCache.DisplayIndex = 4
		#
		# FallbackToDP
		#
		#$FallbackToDP.DataPropertyName = "$FallbackToDP"
		$FallbackToDP.HeaderText = 'FallbackToDP'
		$FallbackToDP.Name = 'FallbackToDP'
		$FallbackToDP.ReadOnly = $true
		$FallbackToDP.SortMode = 'Automatic'
		$FallbackToDP.Width = 120
		$FallbackToDP.DisplayIndex = 5
		#
		#
		#
		# DownloadOnSlowNetwork
		#
		$DownloadOnSlowNetwork.HeaderText = 'DownloadOnSlowNetwork'
		$DownloadOnSlowNetwork.Name = 'OnSlowNetwork'
		$DownloadOnSlowNetwork.ReadOnly = $true
		$DownloadOnSlowNetwork.SortMode = 'Automatic'
		$DownloadOnSlowNetwork.Width = 180
		$DownloadOnSlowNetwork.DisplayIndex = 6
		if ($InstallerType -like 'APPV4' -or $InstallerType -like 'APPV5')
		{
			$DownloadOnSlowNetwork.Items.Insert(0, "Download")
			$DownloadOnSlowNetwork.Items.Insert(1, "DoNothing")
			$DownloadOnSlowNetwork.Items.Insert(2, "DownloadContentForStreaming")
		}
		#
		#
		
		#
		Append-RichtextboxStatus -Source $component -Message "Searching Application related informations..."
		
		$AppCount = 0
		$ApplicationCount = 0
		$OnSlowNetwork = $null
		$Applications = Get-WmiObject -Namespace "root\SMS\site_$($SiteCode)" -Class "SMS_ApplicationLatest" -ComputerName $SiteServer | Where-Object { $_.IsExpired -eq $false }
		$ApplicationCount = ($Applications | Measure-Object).Count
		$Searchdatagridview.ColumnHeadersVisible = $true
		
		#Progressbar
		
		$progressbaroverlay1.Maximum = $ApplicationCount
		$progressbaroverlay1.Step = 1
		$progressbaroverlay1.Value = 0
		
		foreach ($Application in $Applications)
		{
			$AppCount++
			$progressbaroverlay1.TextOverlay = "Searching application $($AppCount) / $($ApplicationCount)"
			
			$ApplicationName = $Application.LocalizedDisplayName
			[System.Windows.Forms.Application]::DoEvents()
			$progressbaroverlay1.PerformStep()
			if ($Application.HasContent -eq $true)
			{
				
				# Get Application object including Lazy properties
				$Application.Get()
				# Deserialize SDMPakageXML property from string
				$ApplicationXML = [Microsoft.ConfigurationManagement.ApplicationManagement.Serialization.SccmSerializer]::DeserializeFromString($Application.SDMPackageXML, $true)
				if ($InstallerType -like 'MSIorScript')
				{
					$DeploymentTypes = $ApplicationXML.DeploymentTypes | Where-Object { $_.Installer -like 'MsiInstaller' -or $_.Installer -like 'scriptInstaller' }
				}
				
				if ($InstallerType -like 'APPV4')
				{
					$DeploymentTypes = $ApplicationXML.DeploymentTypes | Where-Object { $_.Installer -like 'AppVInstaller' }
				}
				if ($InstallerType -like 'APPV5')
				{
					$DeploymentTypes = $ApplicationXML.DeploymentTypes | Where-Object { $_.Installer -like 'AppV5xInstaller' }
				}
				foreach ($DeploymentType in $DeploymentTypes)
				{
					$DeploymentTypeName = $DeploymentType.Title
					$ApplicationDisplayName = $ApplicationName
					$DeploymentTypeName = $DeploymentTypeName
					$PinOnClient = $DeploymentType.Installer.Contents[0].PinOnClient
					$BranchCache = $DeploymentType.Installer.Contents[0].Peercache
					$FallbackToDP = $DeploymentType.Installer.Contents[0].FallbackToUnprotectedDP
					
					if ($InstallerType -like 'MSIorScript')
					{
						$OnSlowNetwork = $DeploymentType.Installer.Contents[0].OnSlowNetwork
					}
					if ($InstallerType -like 'APPV4' -or $InstallerType -like 'APPV5')
					{
						$OnSlowNetwork = [System.String]$DeploymentType.Installer.Contents[0].OnSlowNetwork
					}
					
					$Searchdatagridview.Rows.Add($false, $ApplicationDisplayName, $DeploymentTypeName, $PinOnClient, $BranchCache, $FallbackToDP, $OnSlowNetwork)
					
				}
			}
		}
		
		$progressbaroverlay1.TextOverlay = 'Search complete!'
		
		if ($Applications)
		{
			Append-RichtextboxStatus -Source $component -Message "successed." -MessageColor 'blue'
			$savebutton1.Enabled = $true
			$checkbox0.visible = $true
		}
		else
		{
			Append-RichtextboxStatus -Source $component -Message "failed or not found" -MessageColor 'red'
		}
		
	}
	
	function Set-CheckboxRectangle
	{
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			$CheckBox,
			[Parameter(Mandatory = $true)]
			$ColumnIndex,
			[Parameter(Mandatory = $true)]
			$RowIndex
			
		)
		
		
		#Get the column header cell bounds
		$ColumnIndex = [int32]$ColumnIndex + 1
		$Rectangle = $Searchdatagridview.GetCellDisplayRectangle($ColumnIndex, $RowIndex, $true)
		
		$x = $Rectangle.Location.X - 30
		$y = $Rectangle.Location.Y + ($Rectangle.Height - $checkbox.Height) / 2 - 6
		
		$CheckBox.Location = "$x, $y"
		$CheckBox.Visible = $true
	}
	
	
	function Update-ApplicationContentSettings
	{
		[CmdletBinding(SupportsShouldProcess = $true)]
		param (
			[parameter(Mandatory = $true)]
			[ValidateNotNullOrEmpty()]
			[string]$SiteServer,
			[parameter(Mandatory = $true)]
			[ValidateNotNullOrEmpty()]
			[string]$SiteCode,
			[ValidateSet("MSIorScript", "APPV4", "APPV5")]
			[string]$InstallerType
		)
		# Determine selected row count
		$SelectedRowCount = 0
		$AllRowCount = 0
		$component = "Save changes"
		
		for ($RowIndex = 0; $RowIndex -lt $Searchdatagridview.RowCount; $RowIndex++)
		{
			if ($Searchdatagridview.Rows[$RowIndex].Cells[0].Value -eq $true)
			{
				$AllRowCount++
			}
		}
		
		#Progressbar
		$progressbaroverlay1.Step = 1
		$progressbaroverlay1.Value = 0
		$progressbaroverlay1.Maximum = $AllRowCount
		
		$Applications = Get-WmiObject -Namespace "root\SMS\site_$($SiteCode)" -Class "SMS_ApplicationLatest" -ComputerName $SiteServer | Where-Object { $_.IsExpired -eq $false }
		
		# Enumerate through selected rows in DataGridView
		for ($RowIndex = 0; $RowIndex -lt $Searchdatagridview.RowCount; $RowIndex++)
		{
			$CellAppName = $Searchdatagridview.Rows[$RowIndex].Cells[1].Value
			$CellAppSelected = $Searchdatagridview.Rows[$RowIndex].Cells[0].Value
			$CellDeploymentTypeSelected = $Searchdatagridview.Rows[$RowIndex].Cells[2].Value
			if ($CellAppSelected -eq $true)
			{
				$SelectedRowCount++
				$progressbaroverlay1.TextOverlay = "Saving settings $($SelectedRowCount) / $($AllRowCount)"
				[System.Windows.Forms.Application]::DoEvents()
				$progressbaroverlay1.PerformStep()
				
				$Application = $Applications | Where-Object { $_.LocalizedDisplayName -eq "$CellAppName" }
				$ApplicationName = $Application.LocalizedDisplayName
				
				Append-RichtextboxStatus -Source $component -Message "$ApplicationName" -MessageColor 'blue'
				
				$PinOnClient = $Searchdatagridview.Rows[$RowIndex].Cells[3].Value
				$BranchCache = $Searchdatagridview.Rows[$RowIndex].Cells[4].Value
				$FallbackToDP = $Searchdatagridview.Rows[$RowIndex].Cells[5].Value
				
				if ($InstallerType -like 'MSIorScript')
				{
					$OnSlowNetwork = $Searchdatagridview.Rows[$RowIndex].Cells[6].Value
					
					if ($OnSlowNetwork -eq $False)
					{
						$OnSlowNetwork = 'DoNothing'
					}
					if ($OnSlowNetwork -eq $True)
					{
						$OnSlowNetwork = 'Download'
					}
				}
				if ($InstallerType -like 'APPV4' -or $InstallerType -like 'APPV5')
				{
					$OnSlowNetwork = [System.String]$Searchdatagridview.Rows[$RowIndex].Cells[6].Value
				}
				
				# Get Application object including Lazy properties
				$Application.Get()
				# Deserialize SDMPakageXML property from string
				$ApplicationXML = [Microsoft.ConfigurationManagement.ApplicationManagement.Serialization.SccmSerializer]::DeserializeFromString($Application.SDMPackageXML, $true)
				$DeploymentType = $ApplicationXML.DeploymentTypes | Where-Object { $_.Title -like "$CellDeploymentTypeSelected" }
				
				$DeploymentTypeName = $DeploymentType.Title
				$DeploymentType.Installer.Contents[0].PinOnClient = $PinOnClient
				$DeploymentType.Installer.Contents[0].Peercache = $BranchCache
				$DeploymentType.Installer.Contents[0].FallbackToUnprotectedDP = $FallbackToDP
				$DeploymentType.Installer.Contents[0].OnSlowNetwork = $OnSlowNetwork
				
				# Serialize $ApplicationXML object back to a string and store it in $UpdatedXML
				$UpdatedXML = [Microsoft.ConfigurationManagement.ApplicationManagement.Serialization.SccmSerializer]::SerializeToString($ApplicationXML, $true)
				Append-RichtextboxStatus -Source $component -Message "Updating $DeploymentTypeName" -MessageColor 'blue'
				
				$Application.SDMPackageXML = $UpdatedXML
				$Application.Put() | Out-Null
			}
		}
		
		$progressbaroverlay1.TextOverlay = 'All changes saved complete!'
		Append-RichtextboxStatus -Source $component -Message "All changes saved complete" -MessageColor 'green'
		$savebutton1.Enabled = $true
		
	}
	
	Function Get-BitFlagsSet($FlagsProp, $BitFlagHashTable) {
		#Original from http://www.moyerteam.com/2013/11/determine-bits-set-configmgr-properties/
		
		$ReturnHashTable = @{
		}
		$BitFlagHashTable.Keys | ForEach-Object {
			if (($FlagsProp -band $BitFlagHashTable.Item($_)) -ne 0) {
				$ReturnHashTable.Add($($_), $true)
			} else {
				$ReturnHashTable.Add($($_), $false)
			}
		}
		$ReturnHashTable
	}
	
	
	function Get-AdvInformation {
		#Original from http://www.moyerteam.com/2013/11/determine-bits-set-configmgr-properties/
		#Modified by Sandy, 22.10.2016
		
		Param (
			[parameter(Mandatory = $true)]
			[ValidateNotNullOrEmpty()]
			[string]$SiteServer,
			[parameter(Mandatory = $true)]
			[ValidateNotNullOrEmpty()]
			[string]$SiteCode,
			[Parameter(Mandatory = $true)]
			[string]$AdvertisementID
		)
		
		
		try {
			$Error.Clear()
			
			#get an instance of the advertisement
			$PkgAdvs = Get-WmiObject -computername $siteserver -ns "root\SMS\Site_$sitecode" -class SMS_Advertisement | Where-Object {
				$_.ProgramName -ne '*' -and $_.AdvertisementID -like $AdvertisementID
			}
			
			#Write-host "Advertisement Name:" $PkgAdvs.AdvertisementName
			#Write-host "Advertisement Id:" $PkgAdvs.AdvertisementId
			#Write-host "AdvertFlags:" $PkgAdvs.AdvertFlags
			#Write-host "RemoteClientFlags:" $PkgAdvs.RemoteClientFlags
					
			#hash table with bit flag definitions
			$AdvertFlagsHex = @{
				DONOT_FALLBACK = "0x00020000"
				BranchCache = "0x00010000"
			}
			
			$RemoteClientFlagsHex = @{
				DOWNLOAD_FROM_REMOTE_DISPPOINT = "0x00000040"
				DONT_RUN_NO_LOCAL_DISPPOINT = "0x00000020"
			}
			
			#Get the flags set
			Get-BitFlagsSet -FlagsProp $PkgAdvs.AdvertFlags -BitFlagHashTable $AdvertFlagsHex
			Get-BitFlagsSet -FlagsProp $PkgAdvs.RemoteClientFlags -BitFlagHashTable $RemoteClientFlagsHex
			
		} catch {
			Write-Host $error[0].Exception.tostring()
		}
		
	}
	
	function Get-PackageInformation {
		#Original from http://www.moyerteam.com/2013/11/determine-bits-set-configmgr-properties/
		#Modified by Sandy, 22.10.2016
		
		Param (
			[parameter(Mandatory = $true)]
			[ValidateNotNullOrEmpty()]
			[string]$SiteServer,
			[parameter(Mandatory = $true)]
			[ValidateNotNullOrEmpty()]
			[string]$SiteCode,
			[Parameter(Mandatory = $true)]
			[string]$PackageID
		)
		
		
		try {
			$Error.Clear()
			
			#get an instance of the advertisement
			$PkgInfo = Get-WmiObject -computername $siteserver -ns "root\SMS\Site_$sitecode" -class SMS_package | Where-Object {
				$_.PackageID -like $PackageID
			}
			
			#Write-host "Package Name:" $PkgInfo.Name
			#Write-host "Package Id:" $PkgInfo.PackageID
			#Write-host "Package Flags:" $PkgInfo.PkgFlags
					
			#hash table with bit flag definitions
			$PERSISTCONNECTIONHex = @{
				PERSISTCONNECTION = "0x02000000"
			}
			
			#Get the flags set
			Get-BitFlagsSet -FlagsProp $PkgInfo.PkgFlags -BitFlagHashTable $PERSISTCONNECTIONHex
			
		} catch {
			Write-Host $error[0].Exception.tostring()
		}
		
	}
	
	function Set-PackagePersistContent {
		
		#More information check https://msdn.microsoft.com/en-gb/library/cc146108.aspx
		#More information check http://2pintsoftware.com/BranchCache-enable-task-sequences-sccm/
		#More information check http://powerschill.com/uncategorized/bitwise-operators/
		
		Param (
			[CmdletBinding(SupportsShouldProcess = $true)]
			[parameter(Mandatory = $true)]
			[ValidateNotNullOrEmpty()]
			[string]$SiteServer,
			[parameter(Mandatory = $true)]
			[ValidateNotNullOrEmpty()]
			[string]$SiteCode,
			[Parameter(Mandatory = $false)]
			[string]$PackageID,
			[Parameter(Mandatory = $false)]
			[bool]$PERSISTCONNECTION
		)
		
		$PERSISTCONNECTIONHEX = "0x02000000"
		
		
		try {
			$Error.Clear()
			
			
			#Set PERSISTCONNECTIONHEX
			#
			$PkgInfo = Get-WmiObject -computername $siteserver -ns "root\SMS\Site_$sitecode" -class SMS_package | Where-Object {
				$_.PackageID -like $PackageID
			}
			$NewPkg = [wmi]$PkgInfo.__PATH
			if ($PERSISTCONNECTION -eq $true) {
				$NewPkg.PkgFlags = $NewPkg.PkgFlags -bor $PERSISTCONNECTIONHEX
				$NewPkg.Put()
			}
			if ($PERSISTCONNECTION -eq $false) {
				if ($PkgInfo.PkgFlags -band $PERSISTCONNECTIONHEX) {
					$NewPkg.PkgFlags = $NewPkg.PkgFlags -bxor $PERSISTCONNECTIONHEX
					$NewPkg.Put()
				}
			}
			
		} catch {
			Write-Host $error[0].Exception.tostring()
		}
		
	}
	
	
	function Search-Packages
	{
		[CmdletBinding(SupportsShouldProcess = $true)]
		param (
			[parameter(Mandatory = $true)]
			[ValidateNotNullOrEmpty()]
			[string]$SiteServer,
			[parameter(Mandatory = $true)]
			[ValidateNotNullOrEmpty()]
			[string]$SiteCode
		)
		$SearchResults = $null
		$component = "Search Packages"
		
		#Create Columns
		$PackageName = New-Object 'System.Windows.Forms.DataGridViewTextBoxColumn'
		$AdvertisementName = New-Object 'System.Windows.Forms.DataGridViewTextBoxColumn'
		$PersistCache = New-Object 'System.Windows.Forms.DataGridViewCheckBoxColumn'
		$BranchCache = New-Object 'System.Windows.Forms.DataGridViewCheckBoxColumn'
		$FallbackToDP = New-Object 'System.Windows.Forms.DataGridViewCheckBoxColumn'
		$Select = New-Object 'System.Windows.Forms.DataGridViewCheckBoxColumn'
		$DownloadOnSlowNetwork = New-Object 'System.Windows.Forms.DataGridViewCheckBoxColumn'
		#
		#
		#
		[void]$Searchdatagridview.Columns.Add($Select)
		[void]$Searchdatagridview.Columns.Add($PackageName)
		[void]$Searchdatagridview.Columns.Add($AdvertisementName)
		[void]$Searchdatagridview.Columns.Add($PersistCache)
		[void]$Searchdatagridview.Columns.Add($BranchCache)
		[void]$Searchdatagridview.Columns.Add($FallbackToDP)
		[void]$Searchdatagridview.Columns.Add($DownloadOnSlowNetwork)		
		#
		#Select
		#
		#$Select.HeaderText = 'Select for modify'
		$Select.Name = 'Select'
		$Select.ReadOnly = $false
		$Select.SortMode = 'Automatic'
		$Select.Width = 100
		$Select.DisplayIndex = 0	
		#
		# ApplicationDisplayName
		#
		#$PackageDisplayNam.DataPropertyName = "$PackageDisplayNam"
		$PackageName.HeaderText = 'PackageName'
		$PackageName.Name = 'PackageName'
		$PackageName.ReadOnly = $True
		$PackageName.SortMode = 'Automatic'
		$PackageName.Width = 250
		$PackageName.DisplayIndex = 1	
		#
		# DeploymentTypeName
		#
		#$ProgramName.DataPropertyName = "$ProgramName"
		$AdvertisementName.HeaderText = 'AdvertisementName'
		$AdvertisementName.Name = 'AdvertisementName'
		$AdvertisementName.ReadOnly = $True
		$AdvertisementName.SortMode = 'Automatic'
		$AdvertisementName.Width = 280
		$AdvertisementName.DisplayIndex = 2
		#
		# PersistCache
		#
		#$PersistCache.DataPropertyName = "$PinOnClient"
		$PersistCache.HeaderText = 'PersistCache'
		$PersistCache.Name = 'PersistCache'
		$PersistCache.ReadOnly = $true
		$PersistCache.SortMode = 'Automatic'
		$PersistCache.Width = 120
		$PersistCache.DisplayIndex = 3
		#
		# BranchCache
		#
		#$BranchCache.DataPropertyName = "$BranchCache"
		$BranchCache.HeaderText = 'BranchCache'
		$BranchCache.Name = 'BranchCache'
		$BranchCache.ReadOnly = $true
		$BranchCache.SortMode = 'Automatic'
		$BranchCache.Width = 120
		$BranchCache.DisplayIndex = 4
		#
		# FallbackToDP
		#
		#$FallbackToDP.DataPropertyName = "$FallbackToDP"
		$FallbackToDP.HeaderText = 'FallbackToDP'
		$FallbackToDP.Name = 'FallbackToDP'
		$FallbackToDP.ReadOnly = $true
		$FallbackToDP.SortMode = 'Automatic'
		$FallbackToDP.Width = 120
		$FallbackToDP.DisplayIndex = 5
		#
		#
		#
		# DownloadOnSlowNetwork
		#
		$DownloadOnSlowNetwork.HeaderText = 'DownloadOnSlowNetwork'
		$DownloadOnSlowNetwork.Name = 'OnSlowNetwork'
		$DownloadOnSlowNetwork.ReadOnly = $true
		$DownloadOnSlowNetwork.SortMode = 'Automatic'
		$DownloadOnSlowNetwork.Width = 180
		$DownloadOnSlowNetwork.DisplayIndex = 6
		#
		#	
		Append-RichtextboxStatus -Source $component -Message "Searching Packages related informations..."
		
		$AdvCount = 0
		$AdvsCount = 0
		
		$Advs = Get-WmiObject -computername $siteserver -ns "root\SMS\Site_$sitecode" -class SMS_Advertisement | Where-Object{ $_.ProgramName -ne '*' }
		$AdvsCount = ($Advs | Measure-Object).Count
		$Searchdatagridview.ColumnHeadersVisible = $true
		
		#Progressbar
		
		$progressbaroverlay1.Maximum = $AdvsCount
		$progressbaroverlay1.Step = 1
		$progressbaroverlay1.Value = 0
		
		foreach ($Adv in $Advs)
		{
			$AdvCount++
			$progressbaroverlay1.TextOverlay = "Searching application $($AdvCount) / $($AdvsCount)"
			
			[System.Windows.Forms.Application]::DoEvents()
			$progressbaroverlay1.PerformStep()
			
			$AdvertisementID = $Adv.AdvertisementID
			$AdvName = $Adv.AdvertisementName
			$PackageID = $Adv.PackageID
			$PkgInfo = Get-WmiObject -computername $siteserver -ns "root\SMS\Site_$sitecode" -class SMS_package | Where-Object { $_.PackageID -like $PackageID}
			$PackageName = $PkgInfo.Name
			
			$GetAdv = Get-AdvInformation -SiteServer $SiteServer -SiteCode $SiteCode -AdvertisementID $AdvertisementID
			$GetPkg = Get-PackageInformation -SiteServer $SiteServer -SiteCode $SiteCode -PackageID $PackageID
			
			$PinOnClient = $GetPkg.PERSISTCONNECTION
			$BranchCache = $GetAdv.BranchCache
			$FallbackToDP = !$GetAdv.DONOT_FALLBACK
			$OnSlowNetwork = $GetAdv.DOWNLOAD_FROM_REMOTE_DISPPOINT
			
			$Searchdatagridview.Rows.Add($false, $PackageName, $AdvName, $PinOnClient, $BranchCache, $FallbackToDP, $OnSlowNetwork)
			
		}
		
		$progressbaroverlay1.TextOverlay = 'Search complete!'
		
		if ($Advs)
		{
			Append-RichtextboxStatus -Source $component -Message "successed." -MessageColor 'blue'
			$savebutton1.Enabled = $true
			$checkbox0.visible = $true
		}
		else
		{
			Append-RichtextboxStatus -Source $component -Message "failed or not found" -MessageColor 'red'
		}
		
	}
	
	function Set-AdvInformation {
		
		#More information check https://msdn.microsoft.com/en-gb/library/cc146108.aspx
		#More information check http://2pintsoftware.com/BranchCache-enable-task-sequences-sccm/
		#More information check http://powerschill.com/uncategorized/bitwise-operators/
		
		Param (
			[CmdletBinding(SupportsShouldProcess = $true)]
			[parameter(Mandatory = $true)]
			[ValidateNotNullOrEmpty()]
			[string]$SiteServer,
			[parameter(Mandatory = $true)]
			[ValidateNotNullOrEmpty()]
			[string]$SiteCode,
			[Parameter(Mandatory = $false)]
			[string]$AdvertisementID,
			[Parameter(Mandatory = $false)]
			[bool]$DONOTFALLBACK,
			[Parameter(Mandatory = $false)]
			[bool]$BranchCache,
			[Parameter(Mandatory = $false)]
			[bool]$DOWNLOADONSLOW
		)
		
		$DONOTFALLBACKHEX = "0x00020000"
		$BranchCacheHEX = "0x00010000"
		$DOWNLOADFROMREMOTEDISPPOINTHEX = "0x00000040"
		$DONTRUNNOLOCALDISPPOINTHEX = "0x00000020"
		
		try {
			$Error.Clear()
			
			#Set Download On Slow Network, base on DOWNLOAD_FROM_REMOTE_DISPPOINT and DONT_RUN_NO_LOCAL_DISPPOINT
			$PkgAdvs = Get-WmiObject -computername $siteserver -ns "root\SMS\Site_$sitecode" -class SMS_Advertisement | Where-Object {
				$_.ProgramName -ne '*' -and $_.AdvertisementID -like $AdvertisementID
			}
			$NewAdv = [wmi]$PkgAdvs.__PATH
			if ($DOWNLOADONSLOW -eq $true) {
				#Set DOWNLOADFROMREMOTEDISPPOINTHEX
				$NewAdv.RemoteClientFlags = $PkgAdvs.RemoteClientFlags -bor $DOWNLOADFROMREMOTEDISPPOINTHEX
				$NewAdv.Put()
				#
				#Set DONTRUNNOLOCALDISPPOINT
				#
				$PkgAdvs = Get-WmiObject -computername $siteserver -ns "root\SMS\Site_$sitecode" -class SMS_Advertisement | Where-Object {
					$_.ProgramName -ne '*' -and $_.AdvertisementID -like $AdvertisementID
				}
				$NewAdv = [wmi]$PkgAdvs.__PATH
				if ($PkgAdvs.RemoteClientFlags -band $DONTRUNNOLOCALDISPPOINTHEX) {
					$NewAdv.RemoteClientFlags = $PkgAdvs.RemoteClientFlags -bxor $DONTRUNNOLOCALDISPPOINTHEX
					$NewAdv.Put()
				}
			}
			if ($DOWNLOADONSLOW -eq $false) {
				#Set DOWNLOADFROMREMOTEDISPPOINTHEX
				if ($PkgAdvs.RemoteClientFlags -band $DOWNLOADFROMREMOTEDISPPOINTHEX) {
					$NewAdv.RemoteClientFlags = $PkgAdvs.RemoteClientFlags -bxor $DOWNLOADFROMREMOTEDISPPOINTHEX
					$NewAdv.Put()
				}
				#
				#Set DONTRUNNOLOCALDISPPOINT
				#
				$PkgAdvs = Get-WmiObject -computername $siteserver -ns "root\SMS\Site_$sitecode" -class SMS_Advertisement | Where-Object {
					$_.ProgramName -ne '*' -and $_.AdvertisementID -like $AdvertisementID
				}
				$NewAdv = [wmi]$PkgAdvs.__PATH
				$NewAdv.RemoteClientFlags = $PkgAdvs.RemoteClientFlags -bor $DONTRUNNOLOCALDISPPOINTHEX
				$NewAdv.Put()
			}
			#
			#
			#Set BranchCache
			#
			$PkgAdvs = Get-WmiObject -computername $siteserver -ns "root\SMS\Site_$sitecode" -class SMS_Advertisement | Where-Object {
				$_.ProgramName -ne '*' -and $_.AdvertisementID -like $AdvertisementID
			}
			$NewAdv = [wmi]$PkgAdvs.__PATH
			if ($BranchCache -eq $true) {
				$NewAdv.AdvertFlags = $PkgAdvs.AdvertFlags -bor $BranchCacheHEX
				$NewAdv.Put()
			}
			if ($BranchCache -eq $false) {
				if ($PkgAdvs.AdvertFlags -band $BranchCacheHEX) {
					$NewAdv.AdvertFlags = $PkgAdvs.AdvertFlags -bxor $BranchCacheHEX
					$NewAdv.Put()
				}
			}
			#
			#
			#Set Do Not Fall Back
			#
			$PkgAdvs = Get-WmiObject -computername $siteserver -ns "root\SMS\Site_$sitecode" -class SMS_Advertisement | Where-Object {
				$_.ProgramName -ne '*' -and $_.AdvertisementID -like $AdvertisementID
			}
			$NewAdv = [wmi]$PkgAdvs.__PATH
			if ($DONOTFALLBACK -eq $true) {
				$NewAdv.AdvertFlags = $PkgAdvs.AdvertFlags -bor $DONOTFALLBACKHEX
				$NewAdv.Put()
			}
			if ($DONOTFALLBACK -eq $false) {
				if ($PkgAdvs.AdvertFlags -band $DONOTFALLBACKHEX) {
					$NewAdv.AdvertFlags = $PkgAdvs.AdvertFlags -bxor $DONOTFALLBACKHEX
					$NewAdv.Put()
				}
			}
		} catch {
			Write-Host $error[0].Exception.tostring()
		}
		
	}
	
	
	function Update-PackageContentSettings
	{
		[CmdletBinding(SupportsShouldProcess = $true)]
		param (
			[parameter(Mandatory = $true)]
			[ValidateNotNullOrEmpty()]
			[string]$SiteServer,
			[parameter(Mandatory = $true)]
			[ValidateNotNullOrEmpty()]
			[string]$SiteCode
		)
		# Determine selected row count
		$SelectedRowCount = 0
		$AllRowCount = 0
		$component = "Save changes"
		
		for ($RowIndex = 0; $RowIndex -lt $Searchdatagridview.RowCount; $RowIndex++)
		{
			if ($Searchdatagridview.Rows[$RowIndex].Cells[0].Value -eq $true)
			{
				$AllRowCount++
			}
		}
		
		#Progressbar
		$progressbaroverlay1.Step = 1
		$progressbaroverlay1.Value = 0
		$progressbaroverlay1.Maximum = $AllRowCount
		
		$Advs = Get-WmiObject -computername $siteserver -ns "root\SMS\Site_$sitecode" -class SMS_Advertisement | Where-Object{ $_.ProgramName -ne '*' }
		
		# Enumerate through selected rows in DataGridView
		for ($RowIndex = 0; $RowIndex -lt $Searchdatagridview.RowCount; $RowIndex++)
		{
			$CellAdvSelected = $Searchdatagridview.Rows[$RowIndex].Cells[0].Value
			$PackagesName = $Searchdatagridview.Rows[$RowIndex].Cells[1].Value
			$AdvName = $Searchdatagridview.Rows[$RowIndex].Cells[2].Value
	
			if ($CellAdvSelected -eq $true)
			{
				$SelectedRowCount++
				$progressbaroverlay1.TextOverlay = "Saving settings $($SelectedRowCount) / $($AllRowCount)"
				[System.Windows.Forms.Application]::DoEvents()
				$progressbaroverlay1.PerformStep()
				$PkgInfo = Get-WmiObject -computername $siteserver -ns "root\SMS\Site_$sitecode" -class SMS_package | Where-Object { $_.Name -like $PackagesName}
				$AdvInfo = Get-WmiObject -computername $siteserver -ns "root\SMS\Site_$sitecode" -class SMS_Advertisement | Where-Object { $_.AdvertisementName -like $AdvName}
				
				$AdvertisementID = $AdvInfo.AdvertisementID
				$PackageID = $PkgInfo.PackageID
				Append-RichtextboxStatus -Source $component -Message "$PackagesName" -MessageColor 'blue'
				
				#Persist Cache
				$PinOnClient = $Searchdatagridview.Rows[$RowIndex].Cells[3].Value
				Set-PackagePersistContent -SiteServer $SiteServer -SiteCode $SiteCode -PackageID $PackageID -PERSISTCONNECTION $PinOnClient
				#
				#BranchCache,FallbackToDP,OnSlownetwork
				#
				$BranchCache = $Searchdatagridview.Rows[$RowIndex].Cells[4].Value
				$FallbackToDP = !$Searchdatagridview.Rows[$RowIndex].Cells[5].Value
				$OnSlowNetwork = $Searchdatagridview.Rows[$RowIndex].Cells[6].Value
				Set-AdvInformation -SiteServer $SiteServer -SiteCode $SiteCode -AdvertisementID $AdvertisementID -DOWNLOADONSLOW $OnSlowNetwork -BranchCache $BranchCache -DONOTFALLBACK $FallbackToDP
	
			}
		}
		
		$progressbaroverlay1.TextOverlay = 'All changes saved complete!'
		Append-RichtextboxStatus -Source $component -Message "All changes saved complete" -MessageColor 'green'
		$savebutton1.Enabled = $true
		
	}
#endregion Source: Globals.ps1

#Start the application
Main ($CommandLine)
